#!/bin/bash
# BackupScripts version 2.0.0
#################################### License ################################
# MIT License Copyright (c) 2023 David Krumm                                #
# All rights reserved.                                                      #
#                                                                           #
# This source code is licensed under the MIT license found in the           #
# LICENSE file in the root directory of this source tree.                   #
#############################################################################

################################# Variables #################################

timestamp="$(date +"%Y-%m-%d %H:%M:%S") - "                                 # Log timestamp
log_file="$HOME_PATH/LogFiles/${JOB_NAME}_$(date +'%Y-%m').log"             # Path to log file
mkdir -p "$(dirname "$log_file")"

############################## Parse Arguments ##############################

args=""                                                                     # Specific argument
message=""                                                                  # Message to send

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --channel)
            channel="$2"                        # evaluate or release
            shift 2
            ;;
        --message)
            message="$2"                        # name of subprocess
            shift 2
            ;;
        --args)
            args="$2"                           # running, lock or pulldate
            shift 2
            ;;
        --timestamps)
            if [ "$2" == "false" ]; then        # Deactivate Timestamps
                timestamp=""
            fi
            shift 2
            ;;
        *)
            echo "ERROR: $JOB_NAME Notifier unknown option: $1"
            echo "ERROR: $JOB_NAME Notifier unknown option: $1" >> "$log_file"
            exit 1
            ;;
    esac
done

# Check for necessary arguments. 
if [[ -z "$channel" ]]; then
    echo "ERROR: $JOB_NAME Notifier --channel is required"
    echo "ERROR: $JOB_NAME Notifier --channel is required" >> "$log_file"
    exit 1
fi

#############################################################################
#                  Adjust the code below to suit your needs                 # 
#############################################################################
################################# Interfaces ################################

to_terminal() {
    # Send message to log and log file
    local msg="$1"
    printf "$msg\n"
}

to_logfile() {
    # Send message to log and log file
    local msg="$1"
    printf "$msg\n" >> "$log_file"
}

to_unraid_notification() {
    # Send to Unraid notification system
    local severity="$1"
    local msg="$2"
    "/usr/local/emhttp/webGui/scripts/notify" -i "$severity" -e "BackupScripts" -s "$JOB_NAME" -d "$msg"
}

to_mail() {
    local msg="$1"
    #
    # Implement your code
    #
}

implement_your_nofification_system() {
    local msg="$1"
    #
    # Implement your code
    #
}

################################# Send ######################################

if [[ "$channel" == "terminal" ]]; then             # Message to logfile
    to_terminal "${timestamp}${message}"

elif [[ "$channel" == "file" ]]; then               # Message to logfile
    to_terminal "${timestamp}${message}"
    to_logfile "${timestamp}${message}"

elif [[ "$channel" == "system" ]]; then             # Message to notification system
    to_terminal "${timestamp}${message}"
    to_logfile "${timestamp}${message}"
    # to_unraid_notification "$args" "$message"     # Uncomment if you use Unraid as syste
    # implement_your_nofification_system            # Implement your code to use

elif [[ "$channel" == "mail" ]]; then               # Message to notification system
    to_terminal "${timestamp}${message}"
    to_logfile "${timestamp}${message}"
    # to_mail                                       # Implement your code to use
fi                                                     