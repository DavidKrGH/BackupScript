#!/bin/bash -xv
# BackupScripts version 1.0.3
#################################### License ################################
# MIT License Copyright (c) 2023 David Krumm                                #
# All rights reserved.                                                      #
#                                                                           #
# This source code is licensed under the MIT license found in the           #
# LICENSE file in the root directory of this source tree.                   #
############################## Parse Arguments ##############################

# Default values
reverse="false"
stop_all="false"
config=""

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --action)
            action="$2"  # start, stop, update
            shift 2
            ;;
        --reverse)
            reverse="$2"  # reverse order on start
            shift 2
            ;;
        --config)
            config="$2"  # Name of config file
            shift 2
            ;;
        --stop_all)
            stop_all="$2"  # Stop all running containers which are not excluded
            shift 2
            ;;
        *)
            $NOTIFIER --channel "system" --args "warning" --message "ERROR: $JOB_NAME DockerHandler unknown option: $1"
            exit 1
            ;;
    esac
done

# Check for necessary arguments
if [[ -z "$action" ]]; then
    $NOTIFIER --channel "system" --args "warning" --message "ERROR: $JOB_NAME DockerHandler --action is required"
    exit 1
fi

# Variablen definieren
config_file="$HOME_PATH/Config/DockerConfig/$config"
timeout=60
dir_path="$HOME_PATH/ConditionMarks"
mkdir -p "$dir_path"
started_containers="$dir_path/${JOB_NAME}_Started_Container.temp"
stoped_containers="$dir_path/${JOB_NAME}_Stoped_Container.temp"


################################ Docker Handling ###########################

pull_image() {
    local image_name=$1
    pull_output=$(docker pull "$image_name" 2>&1)

    if [ $? -ne 0 ]; then
        echo "Fehler beim Pullen des Images: $pull_output"
        exit 1
    fi

    if echo "$pull_output" | grep -q 'Downloaded newer image'; then
        $NOTIFIER --channel "file" --message "$JOB_NAME: The image has been successfully updated."
    elif echo "$pull_output" | grep -q 'Image is up to date'; then
        $NOTIFIER --channel "file" --message "$JOB_NAME: The local image is already the latest version."
    else
        $NOTIFIER --channel "file" --message "$JOB_NAME: Unknown status when the image is being pulled: $pull_output"
    fi
}

is_container_running() {
    docker inspect -f '{{.State.Running}}' "$1" 2>/dev/null
}

list_started_containers() {
    docker ps --format '{{.ID}} {{.Names}}' > "$started_containers"
}

trim() {
    local var="$1"
    var="${var#"${var%%[![:space:]]*}"}"   # Remove leading space
    var="${var%"${var##*[![:space:]]}"}"   # Remove trailing spaces
    echo -n "$var"
}

start_container() {
    local id=$1
    local name=$2
    docker start "$id" > /dev/null 2>&1
    local start_time=$(date +%s)
    while [[ "$(is_container_running "$id")" != "true" ]]; do
        sleep 5
        if (( $(date +%s) - start_time >= timeout )); then
            $NOTIFIER --channel "system" --message "Error: $JOB_NAME timeout while starting container $name ($id)"
            exit 1
        fi
    done
    $NOTIFIER --channel "file" --message "Container $name ($id) started successfully."
    return 0
}

stop_container() {
    local id=$1
    local name=$2
    docker stop "$id" > /dev/null 2>&1
    local start_time=$(date +%s)
    while [[ "$(is_container_running "$id")" == "true" ]]; do
        sleep 5
        if (( $(date +%s) - start_time >= timeout )); then
            $NOTIFIER --channel "system" --message "Error: $JOB_NAME timeout while stoping container $name ($id)"
            exit 1
        fi
    done
    $NOTIFIER --channel "file" --message "Container $name ($id) stoped successfully."
    return 0
}

process_stop() {

    list_started_containers

    # Read config for containers to stop
    local included_containers=()
    while IFS= read -r line; do
        local flag
        local name_inc
        flag=$(trim "$(echo "$line" | awk '{print $1}')")
        name_inc=$(trim "$(echo "$line" | awk '{print $2}')")
        
        if [[ $flag == "+" ]]; then
            included_containers+=("$name_inc")
        fi
    done < "$config_file"

    while IFS= read -r line; do
        local id
        local name
        id=$(trim "$(echo "$line" | awk '{print $1}')")
        name=$(trim "$(echo "$line" | awk '{print $2}')")

        local stop="false"
        for co in "${included_containers[@]}"; do
            
            co=$(trim "$co")
            
            if [[ "$co" == "$id" || "$co" == "$name" ]]; then
                stop="true"
                break
            fi
        done

        if [[ "$stop" == "true" ]]; then
            stop_container "$id" "$name"
            echo "$id $name" >> "$stoped_containers"
        fi
    done < "$started_containers"

    rm "$started_containers"

}

stop_remaining_containers() {

    list_started_containers

    # Read config for excluded container
    local excluded_containers=()
    while IFS= read -r line; do
        local flag
        local name_ex
        flag=$(trim "$(echo "$line" | awk '{print $1}')")
        name_ex=$(trim "$(echo "$line" | awk '{print $2}')")
        
        if [[ $flag == "-" ]]; then
            excluded_containers+=("$name_ex")
        fi
    done < "$config_file"


    # Datei Zeile fÃ¼r Zeile lesen
    while IFS= read -r line; do
        local id
        local name
        id=$(trim "$(echo "$line" | awk '{print $1}')")
        name=$(trim "$(echo "$line" | awk '{print $2}')")

        local stop="true"
        for co in "${excluded_containers[@]}"; do
            
            co=$(trim "$co")
            
            if [[ "$co" == "$id" || "$co" == "$name" ]]; then
                stop="false"
                $NOTIFIER --channel "file" --message "Do not stop Container $name ($id)"
                break
            fi
        done

        if [[ "$stop" == "true" ]]; then
            stop_container "$id" "$name"
            echo "$id $name" >> "$stoped_containers"
        fi
    done < "$started_containers"

    rm "$started_containers"

}

reverse_containers() {

    if [[ "$reverse_order" == "true" ]]; then
        containers=($(echo "${containers[@]}" | tac -s ' '))
    fi

}

process_start() {

    local start_ids=()
    local start_names=()

    while IFS= read -r line; do
        local id
        local name
        id=$(trim "$(echo "$line" | awk '{print $1}')")
        name=$(trim "$(echo "$line" | awk '{print $2}')")

        start_ids+=("$id")
        start_names+=("$name")

    done < "$stoped_containers"

    if [[ "$reverse_order" == "true" ]]; then
        start_ids=($(echo "${start_ids[@]}" | tac -s ' '))
        start_names=($(echo "${start_names[@]}" | tac -s ' '))
    fi

    for i in "${!start_ids[@]}"; do
        start_container "${start_ids[$i]}" "${start_names[$i]}"
    done

    rm "$stoped_containers"

}

################################## Jobs #####################################

if [[ "$action" == "update" ]]; then
    pull_image "restic/restic"
    update_restic_result=$?
    pull_image "rclone/rclone"
    update_rclone_result=$?

    if [[ "$update_restic_result" == 1 || "$update_rclone_result" == 1 ]]; then
        $NOTIFIER --channel "system" --args "warning" --message "$JOB_NAME: Pull or update of Restic or Rclone failed."
        $NOTIFIER --channel "file" --message "Restic exit code: '$update_restic_result'"
        $NOTIFIER --channel "file" --message "Rclone exit code: '$update_rclone_result'"
        $NOTIFIER --channel "file" --message "An attempt is made to continue."
        exit 0
    fi
elif [[ "$action" == "stop" ]]; then
    process_containers "stop" "false"
    stop_container_result=$?

    if [[ "$stop_all" == "true" ]]; then
        stop_remaining_containers
    fi

    if [[ "$stop_container_result" == 1 ]]; then
        $NOTIFIER --channel "file"
        exit 1
    fi
elif [[ "$action" == "start" ]]; then
    process_containers "start" "$reverse"
    start_container_result=$?

    if [[ "$start_container_result" == 1 ]]; then
        $NOTIFIER --channel "file"
        exit 1
    fi
else
    $NOTIFIER --channel "system" --args "warning" --message "ERROR: $JOB_NAME DockerHandler unknown action: $action"
    exit 1
fi
