#!/bin/bash
# BackupScripts version 2.0.0
#################################### License ################################
# MIT License Copyright (c) 2023 David Krumm                                #
# All rights reserved.                                                      #
#                                                                           #
# This source code is licensed under the MIT license found in the           #
# LICENSE file in the root directory of this source tree.                   #
#############################################################################

############################## Parse Arguments ##############################

# Default values
reverse="false"

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --action)
            action="$2"         # start, stop, update
            shift 2
            ;;
        --reverse)
            reverse="$2"        # reverse order on start
            shift 2
            ;;
        *)
            $NOTIFIER --channel "system" --args "warning" --message "ERROR: $JOB_NAME DockerHandler unknown option: $1"
            exit 1
            ;;
    esac
done

# Check for necessary arguments
if [[ -z "$action" ]]; then
    $NOTIFIER --channel "system" --args "warning" --message "ERROR: $JOB_NAME DockerHandler --action is required"
    exit 1
fi

# Variablen definieren
timeout=60
dir_path="$HOME_PATH/ConditionMarks"
mkdir -p "$dir_path"
started_containers="$dir_path/${JOB_NAME}_Started_Container.temp"
stoped_containers="$dir_path/${JOB_NAME}_Stoped_Container.temp"

################################# Funktions #################################

pull_image() {
    local image_name=$1
    pull_output=$(docker pull "$image_name" 2>&1)

    if [ $? -ne 0 ]; then
        return 1
    fi

    if echo "$pull_output" | grep -q 'Downloaded newer image'; then
        $NOTIFIER --channel "file" --message "$JOB_NAME: The image '$image_name' has been successfully updated."
    elif echo "$pull_output" | grep -q 'Image is up to date'; then
        $NOTIFIER --channel "file" --message "$JOB_NAME: The local image '$image_name' is already the latest version."
    else
        $NOTIFIER --channel "file" --message "$JOB_NAME: Unknown status when the image '$image_name' is being pulled: $pull_output"
    fi
}

container_status() {
    docker inspect -f '{{.State.Status}}' "$1" 2>/dev/null
}

list_started_containers() {
    if [ -f "$started_containers" ]; then
        rm "$started_containers"
    fi

    docker ps --format "{{.ID}} {{.Names}}" > "$started_containers"

    if [ $? -ne 0 ]; then
        $NOTIFIER --channel "system" --args "warning" --message "$JOB_NAME: Failed to query started containers"
        exit 1
    fi
}

trim() {
    local var="$1"
    var="${var#"${var%%[![:space:]]*}"}"   # Remove leading space
    var="${var%"${var##*[![:space:]]}"}"   # Remove trailing spaces
    echo -n "$var"
}

start_container() {
    local id=$1
    local name=$2
    docker start "$id" > /dev/null 2>&1
    local start_time=$(date +%s)
    sleep 2
    while [[ "$(container_status "$id")" != "running" ]]; do
        sleep 1
        if (( $(date +%s) - start_time >= timeout )); then
            $NOTIFIER --channel "system" --message "Error: $JOB_NAME timeout while starting container $name ($id)"
            exit 1
        fi
    done
    $NOTIFIER --channel "file" --message "Container $name ($id) started successfully."
    return 0
}

stop_container() {
    local id=$1
    local name=$2
    docker stop "$id" > /dev/null 2>&1
    local start_time=$(date +%s)
    sleep 2
    while [[ "$(container_status "$id")" != "exited" ]]; do
        sleep 1
        if (( $(date +%s) - start_time >= timeout )); then
            $NOTIFIER --channel "system" --message "Error: $JOB_NAME timeout while stoping container $name ($id)"
            exit 1
        fi
    done
    $NOTIFIER --channel "file" --message "Container $name ($id) stoped successfully."
    return 0
}

decode_config() {

    included_pattern=()
    exclude_pattern=()
    stop_remaining="false"


    while IFS= read -r line; do
        local flag=$(trim "$(echo "$line" | awk '{print $1}')")
        local pattern=$(trim "$(echo "$line" | awk '{print $2}')")

        if [[ $flag == "+" ]]; then

            if [[ "$pattern" == "*" ]]; then
                stop_remaining="true"
            else
                included_pattern+=("$pattern")
            fi

        elif [[ $flag == "-" ]]; then
            exclude_pattern+=("$pattern")
        fi

    done < "$DOCKER_SHUTDOWN_CONFIG"
    
}

process_remaining() {

    list_started_containers

    while IFS= read -r line; do
        local id=$(trim "$(echo "$line" | awk '{print $1}')")
        local name=$(trim "$(echo "$line" | awk '{print $2}')")
        local execute_stop="true"

        for pattern in "${exclude_pattern[@]}"; do
            
            pattern=$(trim "$pattern")
            
            if [[ "$id" == $pattern || "$name" == $pattern ]]; then
                execute_stop="false"
                break
            fi
        done

        if [[ "$execute_stop" == "true" ]]; then
            stop_container "$id" "$name"
            echo "$id $name" >> "$stoped_containers"
        fi
    done < "$started_containers"
    
    rm "$started_containers"
}

process_stop() {

    if [ -f "$stoped_containers" ]; then
        rm "$stoped_containers"
    fi
    
    touch $stoped_containers
    list_started_containers
    
    local started_containers_id=()
    local started_containers_name=()
    local stopped_flags=()

    while IFS= read -r line; do
        local id=$(trim "$(echo "$line" | awk '{print $1}')")
        local name=$(trim "$(echo "$line" | awk '{print $2}')")

        started_containers_id+=("$id")
        started_containers_name+=("$name")
        stopped_flags+=("false")
        
    done < "$started_containers"

    for pattern in "${included_pattern[@]}"; do
        
        pattern=$(trim "$pattern")

        for i in "${!started_containers_id[@]}"; do

            if [[ ${stopped_flags[$i]} == "true" ]]; then
                continue
            fi

            local id="${started_containers_id[$i]}"
            local name="${started_containers_name[$i]}"

            if [[ "$id" == $pattern || "$name" == $pattern ]]; then
                stop_container "$id" "$name"
                echo "$id $name" >> "$stoped_containers"
                stopped_flags[$i]="true"
                break
            fi

        done
    done

    rm "$started_containers"
    
    if [[ $stop_remaining == "true" ]]; then
        process_remaining
    fi
}

process_start() {

    if [ ! -f "$stoped_containers" ]; then
        $NOTIFIER --channel "system" --args "warning" --message "$JOB_NAME: Start containers faild"
        $NOTIFIER --channel "file" --message "Temporary file of the stopped container was lost"
        exit 1
    fi

    local ids_to_start=()
    local names_to_start=()

    while IFS= read -r line; do
        local id=$(trim "$(echo "$line" | awk '{print $1}')")
        local name=$(trim "$(echo "$line" | awk '{print $2}')")

        ids_to_start+=("$id")
        names_to_start+=("$name")

    done < "$stoped_containers"

    if [[ "$reverse" == "true" ]]; then
        ids_to_start=($(echo "${ids_to_start[@]}" | tac -s ' '))
        names_to_start=($(echo "${names_to_start[@]}" | tac -s ' '))
    fi

    for i in "${!ids_to_start[@]}"; do
        start_container "${ids_to_start[$i]}" "${names_to_start[$i]}"
    done

    rm "$stoped_containers"

}

################################## Jobs #####################################

if [[ "$action" == "update" ]]; then

    $NOTIFIER --channel "file"
    $NOTIFIER --channel "file" --message "Starting 'Update' job"
    $NOTIFIER --channel "file"

    pull_image "restic/restic"
    update_restic_result=$?
    pull_image "rclone/rclone"
    update_rclone_result=$?

    if [[ "$update_restic_result" == 1 || "$update_rclone_result" == 1 ]]; then
        $NOTIFIER --channel "system" --args "warning" --message "$JOB_NAME: Pull or update of Restic or Rclone failed."
        $NOTIFIER --channel "file" --message "Restic exit code: '$update_restic_result'"
        $NOTIFIER --channel "file" --message "Rclone exit code: '$update_rclone_result'"
        $NOTIFIER --channel "file" --message "An attempt is made to continue."
        exit 0
    fi


elif [[ "$action" == "stop" ]]; then

    $NOTIFIER --channel "file"
    $NOTIFIER --channel "file" --message "Stopping the Docker containers"
    $NOTIFIER --channel "file" --message "Config '$(basename "$DOCKER_SHUTDOWN_CONFIG")'"
    $NOTIFIER --channel "file"
    
    decode_config
    process_stop
    exit 0


elif [[ "$action" == "start" ]]; then

    process_start
    exit 0
    
    
else
    $NOTIFIER --channel "system" --args "warning" --message "ERROR: $JOB_NAME DockerHandler unknown action: $action"
    exit 1
fi
